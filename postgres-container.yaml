---
- name: Deploy PostgreSQL Helm Chart
  hosts: localhost
  vars:
    helm_chart_name: bitnami/postgresql
    helm_chart_version: latest
    helm_release_name: "postgres-{{ ansible_date_time.epoch }}"
    helm_release_namespace: testing
    postgres_db_name: platform
    postgres_username: user1
    postgres_password: pass1
    postgres_admin_username: postgres
    postgres_admin_password: Admin@123
    number_of_replicas: 2
    size: 2Gi
    database: postgresql
    storageClass: local-hostpath-storage
    accessMode: ReadWriteOnce
    deployment_namespace: testing

  tasks:
    - name: Check if Helm is installed
      command: helm version --short
      register: helm_version
      ignore_errors: yes

    - name: Install Helm if not installed
      command: curl https://raw.githubusercontent.com/helm/helm/master/scripts/get-helm-3 | bash
      when: helm_version.rc != 0

    - name: Add Bitnami Helm repository
      command: helm repo add bitnami https://charts.bitnami.com/bitnami
      ignore_errors: yes

    - name: Create PV & PVC file
      shell: "sed -e 's/RELEASE_NAME/{{ helm_release_name }}/g' -e 's/STORAGE_CLASS/{{ storageClass }}/g' -e 's/SIZE/{{ size }}/g' -e 's/ACCESS_MODE/{{ accessMode }}/g' -e 's/RELEASE_SPACE/{{ helm_release_namespace }}/g' -e 's/DATABASE/{{ database }}/g' database-pv_pvc.yaml > pv-pvc.yaml"
      
    - name: Create PV & PVC
      command: kubectl apply -f pv-pvc.yaml
      register: pv_pvc_install
      
    - name: Deploy PostgreSQL Helm Chart
      command: >
        helm install {{ helm_release_name }} {{ helm_chart_name }} -n {{ helm_release_namespace }}
        --set global.postgresql.auth.postgresPassword={{ postgres_admin_password }}
        --set global.postgresql.auth.username={{ postgres_username }}
        --set global.postgresql.auth.password={{ postgres_password }}
        --set global.postgresql.auth.database={{ postgres_db_name }}
        --set readReplicas.replicaCount={{ number_of_replicas }}
        --set primary.persistence.existingClaim={{ helm_release_name }}-pvc
        --set volumePermissions.enabled=true
        --set primary.service.type=NodePort
        --set primary.service.nodePorts.postgresql=32009
      when: pv_pvc_install.rc == 0
      register: helm_install

    - name: Wait for all pods to be in a 'Running' state
      command: kubectl wait --for=condition=Ready pod -l app.kubernetes.io/instance={{ helm_release_name }} -n {{ helm_release_namespace }} --timeout=300s
      when: helm_install.rc == 0

    - name: Print Kubernetes objects created by the Helm chart
      command: kubectl get all -n {{ helm_release_namespace }} -l app.kubernetes.io/instance={{ helm_release_name }}
      register: k8s_objects
      when: helm_install.rc == 0

    - name: Print NodePort service details
      command: kubectl get svc -n {{ helm_release_namespace }} {{ helm_release_name }}-postgresql -o=json
      register: nodeport_details
      when: helm_install.rc == 0
      
    - name: Debug Kubernetes objects
      debug:
        var: k8s_objects.stdout
    
    - name: Debug NodePort service details
      debug:
        var: nodeport_details.stdout
    
    - name: Get NodePort and Private IP
      set_fact:
        nodeport: "{{ nodeport_details.stdout | from_json }}"
        private_ip: "{{ nodeport_details.stdout | from_json }}"
      when: nodeport_details.stdout is defined

    - name: Display NodePort and Private IP
      debug:
        msg: "NodePort: {{ nodeport.spec.ports[0].nodePort }}, Private IP: {{ private_ip.status.loadBalancer.ingress[0].ip }}"
      when: nodeport_details.stdout is defined

    - name: Store data in database 
      uri:
        url: "http://{{ restIP }}:{{ restPORT }}/platform/v1/dbprovision/saveDB"
        method: POST
        body: "{
         \"chart_name\": \"{{ helm_chart_name }}\",
         \"chart_version\": \"{{ helm_chart_version }}\",
          \"release_name\": \"{{ helm_release_name }}\",
          \"release_namespace\": \"{{ helm_release_namespace }}\",
          \"ip\": \"{{ private_ip.status.loadBalancer.ingress[0].ip }}\",
          \"port\": {{ nodeport.spec.ports[0].nodePort }},
          \"db_type\": {{ database }},
          \"db_name\": {{ postgres_db_name }},
          \"username\": {{ postgres_username }},
          \"password\": {{ postgres_password }},
          \"admin_username\": {{ postgres_admin_username }},
          \"admin_password\": {{ postgres_admin_password }},
          \"replica_count\": {{ number_of_replicas }},
          \"storage_size\": \"{{ size }}\",
        }"
        status_code: 200
      when: nodeport_details.stdout is defined
